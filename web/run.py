from os import listdir
from os.path import isfile, join, abspath, dirname
from flask import Flask
from flask import redirect, url_for, send_from_directory
from flask import request

from model.Config import Config
from model.News import NewsCollection, News


# PATH RELATIVITY #############################################################

runner_path = dirname(abspath(__file__))


def get_path(relative_path):
    return abspath(join(runner_path, relative_path))


# COLLECT GLOBAL INFORMATION FROM SOURCES #####################################

# VERSION
with open(get_path('../VERSION'), 'r') as version_file:
    version = version_file.read().replace('\n', '').strip()

# CONFIG
config_path = get_path('config')
config = Config(directory=config_path)

# DOWNLOADS
downloads_path = get_path('../build')
downloads_files = [f for f in listdir(downloads_path)
                   if isfile(join(downloads_path, f))]

# NEWS
news_path = get_path('news')
news = NewsCollection(directory=news_path)


# SETUP FLASK ENGINE ##########################################################

app = Flask(__name__)


# SETUP JINJA2 TEMPLATE ENGINE ################################################

def markdown_filter(value, nl2br=False, p=True):
    """
    nl2br: set to True to replace line breaks with <br> tags
    p: set to False to remove the enclosing <p></p> tags
    """
    from vendor.markdown import markdown
    from vendor.markdown.extensions.nl2br import Nl2BrExtension
    from vendor.markdown.extensions.abbr import AbbrExtension
    extensions = [AbbrExtension()]
    if nl2br is True:
        extensions.append(Nl2BrExtension())
    markdowned = markdown(value, output_format='html5', extensions=extensions)
    if p is False:
        markdowned = markdowned.replace(r"<p>", "").replace(r"</p>", "")
    return markdowned

from jinja2 import Environment, FileSystemLoader
tpl_engine = Environment(loader=FileSystemLoader([get_path('view')]),
                         trim_blocks=True,
                         lstrip_blocks=True)

tpl_engine.filters['markdown'] = markdown_filter
tpl_engine.filters['md'] = markdown_filter

tpl_global_vars = {
    'request': request,
    'version': version,
    'config':  config,
    'downloads_files':  downloads_files,
}


# HELPERS #####################################################################

def render_view(view, context=None):
    """
    A simple helper to render [view] template with [context] vars.
    It automagically adds the global template vars defined above, too.
    It returns a string, usually the HTML contents to display.
    """
    if context is None:
        context = {}
    return tpl_engine.get_template(view).render(
        dict(tpl_global_vars.items() + context.items())
    )


def render_page(page, title="My Page", context=None):
    """
    A simple helper to render the md_page.html template with [context] vars, and
    the additional contents of `page/[page].md` in the `md_page` variable.
    It automagically adds the global template vars defined above, too.
    It returns a string, usually the HTML contents to display.
    """
    if context is None:
        context = {}
    context['title'] = title
    context['md_page'] = ''
    with file(get_path('page/%s.md' % page)) as f:
        context['md_page'] = f.read()
    return tpl_engine.get_template('md_page.html.jinja2').render(
        dict(tpl_global_vars.items() + context.items())
    )


# ROUTING #####################################################################

@app.route("/")
@app.route("/index.html")
def index():
    return render_view('index.html.jinja2', {
        'news': news.find(start=0, count=13),
    })


@app.route("/authors.html")
def authors():
    return render_view('authors.html.jinja2')


@app.route("/licence.html")
def licence():
    return render_view('licence.html.jinja2')


@app.route("/papers.html")
def papers():
    return render_page('papers', title='Papers')


@app.route("/downloads.html")
def downloads():
    changelog = ''
    with file(get_path('../CHANGELOG')) as fc:
        changelog = fc.read()
    return render_view('downloads.html.jinja2', {
        'changelog': changelog,
    })


@app.route('/downloads/<path:filename>')
def downloads_filename(filename):
    return send_from_directory(downloads_path, filename)


@app.route('/doc')
@app.route('/doc/')
def doc_index():
    return redirect(url_for('doc', filename='index.html'))


@app.route('/doc/<path:filename>')
def doc(filename):
    return send_from_directory(get_path('../doc/build/html'), filename)


# MAIN ########################################################################

if __name__ == "__main__":
    # We can leave the debug mode on, as the production files are generated by
    # frozen-flask. We also add the YAML config and news files to the list of
    # files to watch for automatic reload.
    extra_files = [join(config_path, f) for f in listdir(config_path)
                   if isfile(join(config_path, f))]
    extra_files.extend([join(news_path, f) for f in listdir(news_path)
                        if isfile(join(news_path, f))])
    app.run(debug=True, extra_files=extra_files)
